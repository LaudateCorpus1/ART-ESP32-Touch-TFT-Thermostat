// hello
// https://oshwlab.com/l.dijkman/esp32-dev-kit-38-pin-to-spi-touch-tft 
// https://github.com/ldijkman/ART-ESP32-Touch-TFT-Thermostat 
// http://www.Arduino.TK
//
// standalone program for test

#include <WiFiManager.h> // https://github.com/tzapu/WiFiManager
#include <WiFi.h>
#include <WiFiUdp.h>

#include <NTPClient.h>               // Include NTPClient library

#include <TimeLib.h>                 // Include Arduino time library 
// https://github.com/PaulStoffregen/Time

#include <LiquidCrystal_I2C.h>       // Include LiquidCrystal_I2C library
// https://github.com/marcoschwartz/LiquidCrystal_I2C/archive/master.zip



LiquidCrystal_I2C lcd(0x27, 20, 4);  // Configure LiquidCrystal_I2C library with 0x27 address, 16 columns and 2 rows

WiFiUDP ntpUDP;

// 'time.nist.gov' is used (default server) with +1 hour offset (3600 seconds) 60 seconds (60000 milliseconds) update interval

NTPClient timeClient(ntpUDP, "time.nist.gov", 3600, 60 * 1000);

int last_second = 0, second_ = 0, minute_ = 0, hour_ = 0, day_ = 0, month_ = 0, year_ = 0;

const char *monthname[13] = {"null", "Januari", "Februari", "March", "April", "May", "Juni",
                             "Juli", "Augustus", "September", "October", "November", "December"
                            };
char dayname[8][12] = {"null", "Sunday ", "Monday ", "Tuesday ", "Wednesday ", "Thursday ", "Friday ", "Saturday "};







void configModeCallback (WiFiManager *myWiFiManager) {
  Serial.println("Entered config mode");
  Serial.println(WiFi.softAPIP());
  //if you used auto generated SSID, print it
  Serial.println(myWiFiManager->getConfigPortalSSID());
 lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("no server -> connect to ");
  lcd.setCursor(0, 1);
  lcd.print(myWiFiManager->getConfigPortalSSID());
  lcd.setCursor(0, 2);
  lcd.print("and browse to ");
  lcd.setCursor(0, 3);
  lcd.print("192.168.4.1");
}




void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);

  lcd.begin();    //21, 22);  // Initialize I2C LCD module (SDA = GPIO21, SCL = GPIO22)

  lcd.backlight();                   // Turn backlight ON
  lcd.clear();


  lcd.setCursor(0, 0);
  lcd.print("connecting");

  Serial.print("Connecting.");
  //WiFiManager
  //Local intialization. Once its business is done, there is no need to keep it around
  WiFiManager wifiManager;
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //reset settings - for testing
  wifiManager.resetSettings();
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  lcd.setCursor(0, 0);
  lcd.print("no server connect to esp and browse to 192.168.4.1");
  //set callback that gets called when connecting to previous WiFi fails, and enters Access Point mode
  wifiManager.setAPCallback(configModeCallback);

  //fetches ssid and pass and tries to connect
  //if it does not connect it starts an access point with the specified name
  //here  "AutoConnectAP"
  //and goes into a blocking loop awaiting configuration
  if (!wifiManager.autoConnect()) {
    Serial.println("failed to connect and hit timeout");
    //reset and try again, or maybe put it to deep sleep

    ESP.restart();
    delay(1000);
  }

  //if you get here you have connected to the WiFi
  Serial.println("connected...yeey :)");

  timeClient.begin();
  lcd.clear();
}

void loop() {
  // put your main code here, to run repeatedly:
  timeClient.update();

  unsigned long unix_epoch = timeClient.getEpochTime();    // Get Unix epoch time from the NTP server



  second_ = second(unix_epoch);

  if (last_second != second_) {



    minute_ = minute(unix_epoch);

    hour_   = hour(unix_epoch);

    day_    = day(unix_epoch);

    month_  = month(unix_epoch);

    year_   = year(unix_epoch);





    // Send time and date to serial monitor

    Serial.print(hour_);
    Serial.print(":");
    Serial.print(minute_);
    Serial.print(":");
    Serial.println(second_);

    Serial.print(day_);
    Serial.print(" ");
    Serial.print(month_);
    Serial.print(" ");
    Serial.println(year_);

    Serial.print("day number of the week ");
    Serial.println(weekday(unix_epoch));


    // Display time and date on the 16x2 LCD

    lcd.setCursor(5, 0);
    lcd.print(hour_);
    lcd.print(":");
    if (minute_ < 10)lcd.print("0");
    lcd.print(minute_);
    lcd.print(":");
    if (second_ < 10)lcd.print("0");
    lcd.print(second_);
    lcd.print("  ");

    lcd.setCursor(4, 1);
    lcd.print(day(unix_epoch));
    lcd.print(" ");
    lcd.print(month(unix_epoch));
    lcd.print(" ");
    lcd.print(year(unix_epoch));
    lcd.print("  ");

    lcd.setCursor(0, 2);
    lcd.print(dayname[weekday(unix_epoch)]);
    lcd.print(" ");
    lcd.print(day(unix_epoch));
    lcd.print(" ");

    lcd.setCursor(0, 3);
    lcd.print(monthname[month(unix_epoch)]);
    lcd.print(" ");
    lcd.print(year(unix_epoch));
    lcd.print("  ");

    last_second = second_;

  }

  delay(50);

}

void loop() {
  timeClient.update();

  Serial.println(timeClient.getFormattedTime());
  
  Serial.println(timeClient.getDay());
  Serial.println(timeClient.getEpochTime());


  delay(1000);
}
